module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "function": parse_function,
        "object": parse_object,
        "objectDeclaration": parse_objectDeclaration,
        "scriptDeclaration": parse_scriptDeclaration,
        "property": parse_property,
        "props": parse_props,
        "children": parse_children,
        "code": parse_code,
        "beard": parse_beard,
        "objId": parse_objId,
        "objClass": parse_objClass,
        "singleComment": parse_singleComment,
        "blockComment": parse_blockComment,
        "newLine": parse_newLine,
        "filePath": parse_filePath,
        "commentString": parse_commentString,
        "commentBlockString": parse_commentBlockString,
        "sep": parse_sep,
        "string": parse_string,
        "number": parse_number,
        "stringNum": parse_stringNum,
        "stringSpaceNum": parse_stringSpaceNum
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = { offset: 0, line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function clone(object) {
        var result = {};
        for (var key in object) {
          result[key] = object[key];
        }
        return result;
      }
      
      function advance(pos, n) {
        var endOffset = pos.offset + n;
        
        for (var offset = pos.offset; offset < endOffset; offset++) {
          var ch = input.charAt(offset);
          if (ch === "\n") {
            if (!pos.seenCR) { pos.line++; }
            pos.column = 1;
            pos.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            pos.line++;
            pos.column = 1;
            pos.seenCR = true;
          } else {
            pos.column++;
            pos.seenCR = false;
          }
        }
        
        pos.offset += n;
      }
      
      function matchFailed(failure) {
        if (pos.offset < rightmostFailuresPos.offset) {
          return;
        }
        
        if (pos.offset > rightmostFailuresPos.offset) {
          rightmostFailuresPos = clone(pos);
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0, result1;
        
        result1 = parse_function();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_function();
          }
        } else {
          result0 = null;
        }
        return result0;
      }
      
      function parse_function() {
        var result0;
        
        result0 = parse_blockComment();
        if (result0 === null) {
          result0 = parse_singleComment();
          if (result0 === null) {
            result0 = parse_beard();
            if (result0 === null) {
              result0 = parse_object();
            }
          }
        }
        return result0;
      }
      
      function parse_object() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_scriptDeclaration();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_property();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_property();
          }
          if (result1 !== null) {
            result2 = parse_code();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_objectDeclaration();
          if (result0 !== null) {
            result1 = [];
            result2 = parse_property();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_property();
            }
            if (result1 !== null) {
              result2 = parse_children();
              result2 = result2 !== null ? result2 : "";
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_objectDeclaration() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_sep();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_sep();
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_blockComment();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_blockComment();
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_singleComment();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_singleComment();
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_sep();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_sep();
              }
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 42) {
                  result4 = "*";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"*\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse_stringNum();
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_sep();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_sep();
                    }
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, objectName) {return "ob:" + objectName})(pos0.offset, pos0.line, pos0.column, result0[5]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_scriptDeclaration() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_sep();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_sep();
        }
        if (result0 !== null) {
          if (input.substr(pos.offset, 8).toLowerCase() === "*script:") {
            result1 = input.substr(pos.offset, 8);
            advance(pos, 8);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"*script:\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_sep();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_sep();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return "*sc"})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = [];
          result1 = parse_sep();
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_sep();
          }
          if (result0 !== null) {
            if (input.substr(pos.offset, 7).toLowerCase() === "*style:") {
              result1 = input.substr(pos.offset, 7);
              advance(pos, 7);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"*style:\"");
              }
            }
            if (result1 !== null) {
              result2 = [];
              result3 = parse_sep();
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_sep();
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column) {return "*st"})(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_property() {
        var result0;
        
        result0 = parse_props();
        if (result0 === null) {
          result0 = parse_objId();
          if (result0 === null) {
            result0 = parse_objClass();
          }
        }
        return result0;
      }
      
      function parse_props() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_sep();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_sep();
        }
        if (result0 !== null) {
          result1 = parse_stringNum();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_sep();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_sep();
            }
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 58) {
                result3 = ":";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\":\"");
                }
              }
              if (result3 !== null) {
                result4 = [];
                result5 = parse_sep();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_sep();
                }
                if (result4 !== null) {
                  if (input.charCodeAt(pos.offset) === 34) {
                    result5 = "\"";
                    advance(pos, 1);
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"\\\"\"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = parse_stringSpaceNum();
                    if (result6 !== null) {
                      if (input.charCodeAt(pos.offset) === 34) {
                        result7 = "\"";
                        advance(pos, 1);
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"\\\"\"");
                        }
                      }
                      if (result7 !== null) {
                        result8 = [];
                        result9 = parse_sep();
                        while (result9 !== null) {
                          result8.push(result9);
                          result9 = parse_sep();
                        }
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, propName, value) {return "pv:" + propName + ":" + value})(pos0.offset, pos0.line, pos0.column, result0[1], result0[6]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_children() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 123) {
          result0 = "{";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_sep();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_sep();
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_blockComment();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_blockComment();
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_singleComment();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_singleComment();
              }
              if (result3 !== null) {
                result4 = [];
                result5 = parse_sep();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_sep();
                }
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_object();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_object();
                  }
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_sep();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_sep();
                    }
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_blockComment();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_blockComment();
                      }
                      if (result7 !== null) {
                        result8 = [];
                        result9 = parse_singleComment();
                        while (result9 !== null) {
                          result8.push(result9);
                          result9 = parse_singleComment();
                        }
                        if (result8 !== null) {
                          result9 = [];
                          result10 = parse_sep();
                          while (result10 !== null) {
                            result9.push(result10);
                            result10 = parse_sep();
                          }
                          if (result9 !== null) {
                            if (input.charCodeAt(pos.offset) === 125) {
                              result10 = "}";
                              advance(pos, 1);
                            } else {
                              result10 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"}\"");
                              }
                            }
                            if (result10 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10];
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, ob) {return ob;})(pos0.offset, pos0.line, pos0.column, result0[5]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_code() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 123) {
          result0 = "{";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_commentBlockString();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_commentBlockString();
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 125) {
              result2 = "}";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"}\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, co) {return co.join("");})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_beard() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 6).toLowerCase() === "@beard") {
          result0 = input.substr(pos.offset, 6);
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"@beard\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_sep();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_sep();
          }
          if (result1 !== null) {
            result2 = parse_stringNum();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_sep();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_sep();
              }
              if (result3 !== null) {
                result4 = parse_filePath();
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_sep();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_sep();
                  }
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_newLine();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_newLine();
                    }
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name, path) {return "br:" + name + ":" + path})(pos0.offset, pos0.line, pos0.column, result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_objId() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_sep();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_sep();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 35) {
            result1 = "#";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"#\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_stringNum();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_sep();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_sep();
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, objId) {return "id:" + objId})(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_objClass() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_sep();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_sep();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 46) {
            result1 = ".";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_stringNum();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_sep();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_sep();
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, objClass) {return "cl:" + objClass})(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_singleComment() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 35) {
          result0 = "#";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_commentString();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_commentString();
          }
          if (result1 !== null) {
            result3 = parse_newLine();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_newLine();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return "cm"})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_blockComment() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 3) === "###") {
          result0 = "###";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"###\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_commentBlockString();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_commentBlockString();
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 3) === "###") {
              result2 = "###";
              advance(pos, 3);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"###\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return "cb"})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_newLine() {
        var result0;
        
        if (/^[\n\r]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\n\\r]");
          }
        }
        return result0;
      }
      
      function parse_filePath() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result0 = [];
        if (/^[\/.a-zA-Z0-9]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[\\/.a-zA-Z0-9]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[\/.a-zA-Z0-9]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[\\/.a-zA-Z0-9]");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, fp) {return fp.join("");})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_commentString() {
        var result0;
        
        if (/^[ \t0-9a-zA-Z\-!@#$%*"=^&(){}:;?.,\/]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t0-9a-zA-Z\\-!@#$%*\"=^&(){}:;?.,\\/]");
          }
        }
        return result0;
      }
      
      function parse_commentBlockString() {
        var result0;
        
        if (/^[ \t\n\r\t0-9a-zA-Z!@$%*="^&():;?.,]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t\\n\\r\\t0-9a-zA-Z!@$%*=\"^&():;?.,]");
          }
        }
        return result0;
      }
      
      function parse_sep() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (/^[ \n\r\t]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\n\\r\\t]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return ""})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_string() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        if (/^[a-zA-Z]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[a-zA-Z]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[a-zA-Z]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s) {return s.join("");})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_number() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        if (/^[0-9]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, n) {return n+n})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_stringNum() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        if (/^[0-9a-zA-Z\-.]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9a-zA-Z\\-.]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9a-zA-Z\-.]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9a-zA-Z\\-.]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, sn) {return sn.join("");})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_stringSpaceNum() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        if (/^[ \n\t0-9a-zA-Z\-#.%=:;]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\n\\t0-9a-zA-Z\\-#.%=:;]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[ \n\t0-9a-zA-Z\-#.%=:;]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[ \\n\\t0-9a-zA-Z\\-#.%=:;]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, sn) {return sn.join("");})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos.offset === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos.offset < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos.offset === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos.offset !== input.length) {
        var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();