// Generated by CoffeeScript 1.4.0
(function() {
  var addObjectClose, addObjectOpen, addObjectProperties, boxBlock, chopping, compileLJ, cssOutput, deep, fs, generateFiles, getExtension, hboxBlock, htmlElements, htmlOutput, imageBlock, jsOutput, labelBlock, listBlock, ljContents, myArgs, objClosing, objectStack, pageStartHTML5, parser, processBeard, processClass, processComment, processID, processObject, processProperty, processSting, sawIn, sawOut, scriptBlock, styleBlock, vboxBlock,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require("fs");

  parser = require("lumberjack_syntax");

  deep = 0;

  objectStack = [];

  objClosing = "";

  htmlOutput = "";

  cssOutput = "";

  jsOutput = "";

  htmlElements = ["div", "h1", "h2", "h3", "h4", "h5", "h6", "p", "img", "ol", "ul", "li"];

  console.log("Running Sawmill ...");

  compileLJ = function(ljContents) {
    var lumberjackArray;
    lumberjackArray = parser.parse(ljContents);
    console.log("Chopping with Lumberjack...");
    return chopping(lumberjackArray);
  };

  chopping = function(ljArray) {
    var lumber, _fn, _i, _len;
    sawIn();
    _fn = function(lumber) {
      if (typeof lumber === 'string') {
        return processSting(lumber);
      } else {
        return chopping(lumber);
      }
    };
    for (_i = 0, _len = ljArray.length; _i < _len; _i++) {
      lumber = ljArray[_i];
      _fn(lumber);
    }
    return sawOut();
  };

  sawIn = function() {
    return deep++;
  };

  sawOut = function() {
    deep--;
    htmlOutput = htmlOutput + objClosing + "\n";
    objClosing = "";
    console.log(objectStack);
    return objectStack.pop;
  };

  processSting = function(lumberStr) {
    var lli, lumberId;
    if (lumberStr) {
      lli = lumberStr.split(":");
      lumberId = lli[0];
      switch (lumberId) {
        case "ob":
          return processObject(lli);
        case "pv":
          return processProperty(lli);
        case "cl":
          return processClass(lli);
        case "id":
          return processID(lli);
        case "cm":
          return processComment(lli);
        case "br":
          return processBeard(lli);
      }
    }
  };

  processObject = function(lli) {
    var objectType;
    objectType = lli[1];
    if (__indexOf.call(htmlElements, objectType) >= 0) {

    } else {
      switch (objectType) {
        case "html5":
          return pageStartHTML5();
        case "script":
          return scriptBlock;
        case "style":
          return styleBlock;
        case "box":
          return boxBlock;
        case "vbox":
          return vboxBlock;
        case "hbox":
          return hboxBlock;
        case "image":
          return imageBlock;
        case "label":
          return labelBlock;
        case "list":
          return listBlock;
        default:
          return console.log(objectType + " Not Supported");
      }
    }
  };

  processProperty = function(lli) {};

  processClass = function(lli) {};

  processID = function(lli) {};

  processComment = function(lli) {};

  processBeard = function(lli) {};

  pageStartHTML5 = function() {
    objectStack.push("html5");
    htmlOutput = htmlOutput + "<!DOCTYPE html>\n<html>\n";
    return objClosing = "</html>";
  };

  scriptBlock = function() {};

  styleBlock = function() {};

  boxBlock = function() {};

  vboxBlock = function() {};

  hboxBlock = function() {};

  imageBlock = function() {};

  labelBlock = function() {};

  listBlock = function() {};

  getExtension = function(filename) {
    var i;
    i = filename.lastIndexOf(".");
    if (i < 0) {
      return "";
    } else {
      return filename.substr(i);
    }
  };

  addObjectOpen = function() {};

  addObjectProperties = function() {};

  addObjectClose = function() {};

  generateFiles = function() {
    return fs.writeFile("test.html", htmlOutput, function(err) {
      if (err) {
        throw err;
      }
      return console.log("It's saved!");
    });
  };

  myArgs = process.argv.slice(2);

  if (getExtension(myArgs[0]).toLowerCase() === '.lj') {
    ljContents = fs.readFileSync(myArgs[0]).toString();
    compileLJ(ljContents);
    generateFiles();
  } else {
    console.log("Error: Sawmill can only saw lumberjack (.lj) files.");
  }

}).call(this);
